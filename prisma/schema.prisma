// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-initialize
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Dimensions {
  width  Float
  height Float
  depth  Float
}

type Review {
  rating        Float
  comment       String
  date          DateTime
  reviewerName  String
  reviewerEmail String
}

type MetaData {
  barcode   String
  qrCode    String
  createdAt String
  updatedAt String
}

type Product {
  id                   Int
  title                String
  description          String?
  category             String
  price                Float
  discountPercentage   Float?
  rating               Float?
  stock                Int
  tags                 String[]
  brand                String?
  sku                  String?
  weight               Float?
  dimensions           Dimensions?
  warrantyInformation  String?
  shippingInformation  String?
  availabilityStatus   String?
  reviews              Review[]
  returnPolicy         String?
  minimumOrderQuantity Int?
  meta                 MetaData?
  images               String[]
  thumbnail            String
}

type CartItem {
  quantity Int
  product  Product
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cart          Cart[]
}

model Cart {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  total      Float?
  totalItems Int?
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
